


events:
  # on these 2 steps, nothing is done to any of them
  #
  # this is where things decorate the box
  # which they would do by using the workflow context
  #
  # abstracting the system out, these registered hubs will be using the module
  # default hubs are added here - filterhub, opshub, flaghub|clihub
  #
  # only clihub (and user hubs) will run here
  # clihub will call filtering if it is needed
  #
  - box:init
  - app:init


  # this step will only be run when
  # 1. calling `box.setup()`
  # 2. clihub says setup
  # 3. calling another op,
  #    which will trigger an event for that op,
  #    which will be subscribed to by setup
  - box:ops.setup.start
  - box:ops.setup.end

  # added events by things such as presets...
  - any added events here

  # things that need to run when they are done
  - app:ops.setup.start
  - app:ops.setup.end

  # all operations after setup is complete
  # will run setup if it has not been run already
  - box:ops.*
  - app:ops.*


  filter should decorate the core with the filter op


------------------







might not need Apps or Apps context if all is in configs and we have ops do lifecycle?


we do not need to keep the original app around

 workflow
   - context
     - (toConfig)
     - config
     - bundler
       - api
       - config
   - box
     - context
     - config


using the workflow as a model-type, we can use chains and do filtering ops and such...



----------


- move renameByProp to another helper lib, simplify
